// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

// Note that some adapters may set a maximum length for the String type by default, please ensure your strings are long
// enough when changing adapters.
// See https://www.prisma.io/docs/orm/reference/prisma-schema-reference#string for more information
datasource db {
  provider = "sqlite"
  url      = "file:dev.sqlite"
}

// Session model for Shopify authentication
model Session {
  id            String    @id
  shop          String
  state         String
  isOnline      Boolean   @default(false)
  scope         String?
  expires       DateTime?
  accessToken   String
  userId        BigInt?
  firstName     String?
  lastName      String?
  email         String?
  accountOwner  Boolean   @default(false)
  locale        String?
  collaborator  Boolean?  @default(false)
  emailVerified Boolean?  @default(false)
}

model Project {
  id         Int      @id @default(autoincrement()) @map("project_id") // @map is a backend naming convention alias  
  shop       String   @unique
  name       String?
  created_at DateTime @default(now()) @map("created_at")

  experiments Experiment[] // Virtual Field indicating "look @ the experiment model/table for any row that points back to me"
  audiences   Audience[] // List[] uses Foregin keys as links to models to know where to look

  @@map("Project")
}

model Experiment {
  id           Int       @id @default(autoincrement()) @map("experiment_id")
  name         String
  description  String
  status       String    @default("draft") // look for the enum datatype
  trafficSplit Decimal   @map("traffic_split")
  startDate    DateTime? @map("start_date")
  endDate      DateTime? @map("end_date")
  endCondition String?
  sectionId    String
  createdAt    DateTime  @default(now())

  projectId Int     @map("project_id") // Foreign key
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade) // connects to Project's PK

  experimentGoals     ExperimentGoal[]
  experimentAudiences ExperimentAudience[]
  history             ExperimentHistory[]
  variants            Variant[]
  allocations         Allocation[]
  conversions         Conversion[]
  analyses            Analysis[]

  @@map("Experiment")
}

model Goal {
  id         Int      @id @default(autoincrement()) @map("goal_id")
  name       String   @unique // "Completed Purchase", "Viewed Page", etc.
  metricType String?  @map("metric_type") // "conversion", "revenue"
  icon       String?
  createdAt  DateTime @default(now()) @map("created_at") // for auditing 

  experimentGoals ExperimentGoal[]
  conversions     Conversion[]
  analyses        Analysis[]

  @@map("Goal")
}

// This is a "join table" that connects Experiments and Goals
model ExperimentGoal {
  experimentId Int    @map("experiment_id")
  goalId       Int    @map("goal_id")
  goalRole     String // e.g., "primary", "Secondary", I think? -mel

  // Relationships
  experiment Experiment @relation(fields: [experimentId], references: [id], onDelete: Cascade)
  goal       Goal       @relation(fields: [goalId], references: [id], onDelete: Cascade)

  @@id([experimentId, goalId]) // Composite primary key
  @@map("ExperimentGoal")
}

model Audience {
  id        Int    @id @default(autoincrement()) @map("audience_id")
  name      String // "New Visitor", "Mobile User"
  rulesJson Json   @map("rules_json")

  projectId Int     @map("project_id") // Foreign key
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade) // Connects to Project's PK

  experimentAudeinces ExperimentAudience[]

  @@map("Audience")
}

model ExperimentAudience {
  requirementType String @map("requirement_type")

  audienceId Int      @map("audience_id") // Foreign Key
  audience   Audience @relation(fields: [audienceId], references: [id], onDelete: Cascade) // Connects to Audience's PK

  experimentId Int        @map("experiment_id")
  experiment   Experiment @relation(fields: [experimentId], references: [id], onDelete: Cascade)

  @@id([audienceId, experimentId]) // Composite primary key
  @@map("ExperimentAudience")
}

model ExperimentHistory {
  id         Int      @id @default(autoincrement()) @map("histroy_id")
  prevStatus String   @map("prev_status") // draft
  newStatus  String   @map("new_status") // running
  changedAt  DateTime @default(now()) @map("changed_at")

  experimentId Int        @map("experiment_id") // Foreign key
  experiment   Experiment @relation(fields: [experimentId], references: [id], onDelete: Cascade) // connects to Experiment's PK
}

model Variant {
  id          Int     @id @default(autoincrement()) @map("variant_id")
  name        String // "Control", "Variant A"
  description String?
  configData  Json?   @map("config_data") // Stores variant-specific settings (like a different sectionId)

  experimentId Int        @map("experiment_id") // Foreign key
  experiment   Experiment @relation(fields: [experimentId], references: [id], onDelete: Cascade) // connects to Experiment's PK

  allocations Allocation[]
  conversions Conversion[]
  analyses    Analysis[]

  @@map("Variant")
}

model User {
  id            Int      @id @default(autoincrement()) @map("user_id")
  firstSeen     DateTime @default(now()) @map("first_seen")
  latestSession DateTime @updatedAt @map("latest_session") // Prisma's @updatedAt automatically handles this
  deviceType    String?  @map("device_type")

  allocations Allocation[]
  conversions Conversion[]

  @@map("User")
}

// This is the "join table" that assigns a User to a Variant for an Experiment
model Allocation {
  id           Int      @id @default(autoincrement()) @map("assignment_id")
  assignedWhen DateTime @default(now()) @map("assigned_when")
  deviceType   String?  @map("device_type") // The device used at the time of allocation

  userId Int  @map("user_id") // Foreign Key
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade) // Connects User's PK

  experimentId Int        @map("experiment_id")
  experiment   Experiment @relation(fields: [experimentId], references: [id], onDelete: Cascade)

  variantId Int     @map("variant_id")
  variant   Variant @relation(fields: [variantId], references: [id], onDelete: Cascade)

  // This ensures a user can only be allocated to a single experiment ONE time.
  @@unique([userId, experimentId])
  @@map("Allocation")
}

// This records every time a user completes a goal
model Conversion {
  id            Int      @id @default(autoincrement()) @map("conversion_id")
  convertedWhen DateTime @default(now()) @map("converted_when")
  deviceType    String?  @map("device_type")
  moneyValue    Decimal? @map("money_value")

  userId Int  @map("user_id") // Foreign Key
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade) // Connects to User's PK

  variantId Int     @map("variant_id")
  variant   Variant @relation(fields: [variantId], references: [id], onDelete: Cascade)

  goalId Int  @map("goal_id")
  goal   Goal @relation(fields: [goalId], references: [id], onDelete: Cascade)

  experimentId Int        @map("experiment_id")
  experiment   Experiment @relation(fields: [experimentId], references: [id], onDelete: Cascade)

  // This ensures a user can only convert ONCE for a specific goal in an experiment
  @@unique([experimentId, goalId, userId])
  @@map("Conversion")
}

// This stores the calculated statistical results
model Analysis {
  id                     Int      @id @default(autoincrement()) @map("result_id")
  calculatedWhen         DateTime @default(now()) @map("calculated_when")
  daysAnalyzed           Int      @map("days_analyzed")
  totalUsers             Int      @map("total_users")
  totalConversions       Int      @map("total_conversions")
  conversionRate         Decimal  @map("conversion_rate")
  probabilityOfBeingBest Decimal  @map("probability_of_being_best")
  expectedLoss           Decimal  @map("expected_loss")
  credIntervalLift       Json     @map("cred_interval_lift")
  postAlpha              Int      @map("post_alpha")
  postBeta               Int      @map("post_beta")

  experimentId Int        @map("experiment_id") // Foreign Key
  experiment   Experiment @relation(fields: [experimentId], references: [id], onDelete: Cascade) // Connects to the Experiment's PK

  variantId Int     @map("variant_id")
  variant   Variant @relation(fields: [variantId], references: [id], onDelete: Cascade)

  goalId Int  @map("goal_id")
  goal   Goal @relation(fields: [goalId], references: [id], onDelete: Cascade)

  @@map("Analysis")
}
